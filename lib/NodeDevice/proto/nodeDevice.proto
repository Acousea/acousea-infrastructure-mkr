// codec.proto - Protobuf file defining NodeDevice and all module types explicitly
syntax = "proto3";

package acousea;

option java_package = "com.acousea.nodes";
option java_multiple_files = true;

// import "google/protobuf/timestamp.proto";

// -------- Module Messages --------

message AmbientModule {
    int32 temperature = 1;
    int32 humidity = 2;
}

message BatteryModule {
    int32 batteryPercentage = 1;
    int32 batteryStatus = 2;
}

message LocationModule {
    float latitude = 1;
    float longitude = 2;
}

message NetworkRoute {
    int32 destination = 1;
    int32 nextHop = 2;
}

message NetworkModule {
    int32 localAddress = 1;
    repeated NetworkRoute peerRoutes = 2;
    int32 defaultGateway = 3;
}

message OperationMode {
    int32 id = 1;
    string name = 2;
}

message OperationModesModule {
    repeated OperationMode modes = 1;
    int32 activeOperationModeIdx = 2;
}

message OperationModeTransition {
    int32 targetMode = 1;
    int32 duration = 2;
}

message OperationModesGraphModule {
    map<int32, OperationModeTransition> graph = 1;
}

message ReportingPeriodEntry {
    int32 modeId = 1;
    int32 period = 2;
}

message LoRaReportingModule {
    repeated ReportingPeriodEntry entries = 1;
}

message IridiumReportingModule {
    string imei = 1;
    repeated ReportingPeriodEntry entries = 2;
}

message RTCModule {
    int32 epochSeconds = 1;
}

message StorageModule {
    int32 storageUsedMegabytes = 1;
    int32 storageTotalMegabytes = 2;
}

message ICListenStatus {
    int32 unitStatus = 1;
    int32 batteryStatus = 2;
    float batteryPercentage = 3;
    float temperature = 4;
    float humidity = 5;
    string timestamp = 6;
}

message ICListenLoggingConfig {
    message Wav {
        int32 gain = 1;
        int32 sampleRate = 2;
        int32 loggingMode = 3;
        int32 logLength = 4;
        int32 bitDepth = 5;
    }

    message Fft {
        int32 sampleRate = 1; // antes: fftSampleRate
        int32 processingType = 2; // antes: fftProcessingType
        int32 fftsAccumulated = 3;
        int32 loggingMode = 4; // antes: fftLoggingMode
        int32 logLength = 5; // antes: fftLogLength
    }

    Wav wav = 1;
    Fft fft = 2;

    string timestamp = 3;
}

message ICListenStreamingConfig {
    message Wav {
        bool record = 1; // antes: recordWaveform
        bool process = 2; // antes: processWaveform
        int32 processingType = 3; // antes: waveformProcessingType
        int32 interval = 4; // antes: waveformInterval
        int32 duration = 5; // antes: waveformDuration
    }

    message Fft {
        bool record = 1; // antes: recordFFT
        bool process = 2; // antes: processFFT
        int32 processingType = 3; // antes: fftProcessingType
        int32 interval = 4; // antes: fftInterval
        int32 duration = 5; // antes: fftDuration
    }

    Wav wav = 1;
    Fft fft = 2;

    string timestamp = 3;
}

message ICListenRecordingStats {
    string epochTime = 1;
    int32 numberOfClicks = 2;
    int32 recordedMinutes = 3;
    int32 numberOfFiles = 4;
}

message ICListenHF {
    string serialNumber = 1;
    ICListenStatus status = 2;
    ICListenLoggingConfig loggingConfig = 3;
    ICListenStreamingConfig streamingConfig = 4;
    ICListenRecordingStats recordingStats = 5;
}

// -------- NodeDevice --------
// codec.proto - Protobuf file defining NodeDevice and all module types explicitly

enum ModuleCode {
    MODULE_UNKNOWN = 0;
    AMBIENT_MODULE = 1;
    BATTERY_MODULE = 2;
    LOCATION_MODULE = 3;
    NETWORK_MODULE = 4;
    OPERATION_MODES_MODULE = 5;
    OPERATION_MODES_GRAPH_MODULE = 6;
    LORA_REPORTING_MODULE = 7;
    IRIDIUM_REPORTING_MODULE = 8;
    RTC_MODULE = 9;
    STORAGE_MODULE = 10;
    ICLISTEN_STATUS = 11;
    ICLISTEN_LOGGING_CONFIG = 12;
    ICLISTEN_STREAMING_CONFIG = 13;
    ICLISTEN_RECORDING_STATS = 14;
    ICLISTEN_HF = 15;
}


message ModuleWrapper {
    oneof module {
        AmbientModule ambient = 1;
        BatteryModule battery = 2;
        LocationModule location = 3;
        NetworkModule network = 4;
        OperationModesModule operationModes = 5;
        OperationModesGraphModule operationModesGraph = 6;
        LoRaReportingModule loraReporting = 7;
        IridiumReportingModule iridiumReporting = 8;
        RTCModule rtc = 9;
        StorageModule storage = 10;
        ICListenStatus icListenStatus = 11;
        ICListenLoggingConfig icListenLoggingConfig = 12;
        ICListenStreamingConfig icListenStreamingConfig = 13;
        ICListenRecordingStats icListenRecordingStats = 14;
        ICListenHF icListenHF = 15;
    }
}

message NodeDevice {
    string id = 1;
    string name = 2;
    string icon = 3;

    // Note: keys are the numeric values of ModuleCode
    map<int32, ModuleWrapper> modules = 10;
}

// -------- Serializable Payloads --------

message GetUpdatedNodeConfigurationPayload {
    repeated ModuleCode requestedModules = 1; // contiene los módulos solicitados
}

message StatusReportPayload {
    map<int32, ModuleWrapper> modules = 1; // contiene los módulos que se desean reportar
}

message SetNodeConfigurationPayload {
    map<int32, ModuleWrapper> modulesToChange = 1; // contiene los módulos que se desean agregar
}

message ErrorPayload {
    // Mensaje de error en texto plano. // IMPORTANTE: el tamaño debe limitarse en la aplicación (ej. 128 caracteres).
    string errorMessage = 1;
}



message PayloadWrapper {
    oneof payload {
        StatusReportPayload statusPayload = 1;
        SetNodeConfigurationPayload setConfiguration = 2;
        GetUpdatedNodeConfigurationPayload requestedConfiguration = 3;
        ErrorPayload errorPayload = 4;
    }
}

// -------------- Rockblock messages --------------

// Representa com.acousea.backend.core.communicationSystem.domain.RockBlockMessage
message RockBlockMessage {
    // UUID en formato texto (e.g., "550e8400-e29b-41d4-a716-446655440000")
    string id = 1;

    string imei = 2;
    string serial = 3;

    // MOMSN típico de RockBLOCK
    int32 momsn = 4;

    // Mantengo el timestamp como string para ser fiel a tu clase.
    // Si más adelante quieres ISO 8601 estricto, deja así.
    // Si prefieres epoch millis, cambia a int64 transmit_time_epoch_ms.
    string transmit_time = 5;

    double iridium_latitude = 6;
    double iridium_longitude = 7;
    double iridium_cep = 8;

    // Igual que en tu modelo Java
    string data = 9;
}

// -------------- Communication Requests --------------
// Chunk de enrutamiento
message RoutingChunk {
    int32 sender = 1;
    int32 receiver = 2;
    uint32 ttl = 3; // Aunque Java lo guarda como `byte`, lo exponemos como uint32 por compatibilidad
}

message CommunicationPacket {
    RoutingChunk routing = 2; // Contains routing information
    PayloadWrapper payload = 3; // Contains the payload of the request
}

enum RequestStatus {
    REQUEST_UNKNOWN = 0;
    REQUEST_PENDING = 1;
    REQUEST_COMPLETED = 2;
    REQUEST_FAILED = 3;
}

message CommunicationRequest {
    string id = 1; // UUID of the request
    string node_id = 2; // ID of the NodeDevice making the request
    CommunicationPacket packet = 3; // Contains the communication packet
    RequestStatus status = 4; // Status of the request
    string timestamp = 5; // Timestamp of the request
}

// Enum equivalente a CommunicationStatus
enum CommunicationStatus {
    STATUS_UNKNOWN = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILED = 2;
}

// Representación del resultado de una comunicación
message CommunicationResult {
    CommunicationStatus status = 1;
    string message = 2;
    int32 error_code = 3; // Opcional, se ignora si status != FAILED
}


// -------- RPC Message Wrappers --------

message Bytes {
    bytes data = 1;
}

message StringMessage {
    string data = 1;
}

// -------- Codec Service --------

service CodecService {
    rpc Encode (NodeDevice) returns (Bytes);
    rpc Decode (Bytes) returns (NodeDevice);
    rpc EncodeJson (NodeDevice) returns (StringMessage);
    rpc DecodeJson (StringMessage) returns (NodeDevice);
}

// ------------------- FOR MKR1310 NODES INFRASTRUCTURE -------------------
message NodeConfiguration {
    uint32 localAddress = 1;
    OperationModesModule operationModesModule = 2;
    OperationModesGraphModule operationGraphModule = 3;
    LoRaReportingModule loraModule = 4;
    IridiumReportingModule iridiumModule = 5;
}
